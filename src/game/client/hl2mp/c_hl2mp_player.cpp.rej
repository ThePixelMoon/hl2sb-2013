diff a/mp/src/game/client/hl2mp/c_hl2mp_player.cpp b/mp/src/game/client/hl2mp/c_hl2mp_player.cpp	(rejected hunks)
@@ -22,6 +22,18 @@
 #include "c_team.h"
 #include "obstacle_pushaway.h"
 
+#if defined( LUA_SDK )
+#include "luamanager.h"
+#include "lgametrace.h"
+#include "lhl2mp_player_shared.h"
+#include "ltakedamageinfo.h"
+#include "mathlib/lvector.h"
+#endif
+
+#if defined( ARGG )
+#include "iclientmode.h"
+#endif
+
 // Don't alias here
 #if defined( CHL2MP_Player )
 #undef CHL2MP_Player	
@@ -134,22 +146,57 @@ void C_HL2MP_Player::UpdateIDTarget()
 
 void C_HL2MP_Player::TraceAttack( const CTakeDamageInfo &info, const Vector &vecDir, trace_t *ptr )
 {
+#if defined ( LUA_SDK )
+	// Andrew; push a copy of the damageinfo/vector, bring the changes back out
+	// of Lua and set info/vecDir to the new value if it's been modified.
+	CTakeDamageInfo lInfo = info;
+	Vector lvecDir = vecDir;
+
+	BEGIN_LUA_CALL_HOOK( "PlayerTraceAttack" );
+		lua_pushhl2mpplayer( L, this );
+		lua_pushdamageinfo( L, lInfo );
+		lua_pushvector( L, lvecDir );
+		lua_pushtrace( L, *ptr );
+	END_LUA_CALL_HOOK( 4, 1 );
+
+	RETURN_LUA_NONE();
+#endif
+
+#if defined ( LUA_SDK )
+	Vector vecOrigin = ptr->endpos - lvecDir * 4;
+#else
 	Vector vecOrigin = ptr->endpos - vecDir * 4;
+#endif
 
 	float flDistance = 0.0f;
 	
+#if defined ( LUA_SDK )
+	if ( lInfo.GetAttacker() )
+	{
+		flDistance = (ptr->endpos - lInfo.GetAttacker()->GetAbsOrigin()).Length();
+	}
+#else
 	if ( info.GetAttacker() )
 	{
 		flDistance = (ptr->endpos - info.GetAttacker()->GetAbsOrigin()).Length();
 	}
+#endif
 
 	if ( m_takedamage )
 	{
+#if defined ( LUA_SDK )
+		AddMultiDamage( lInfo, this );
+#else
 		AddMultiDamage( info, this );
+#endif
 
 		int blood = BloodColor();
 		
+#if defined ( LUA_SDK )
+		CBaseEntity *pAttacker = lInfo.GetAttacker();
+#else
 		CBaseEntity *pAttacker = info.GetAttacker();
+#endif
 
 		if ( pAttacker )
 		{
@@ -480,8 +532,38 @@ void C_HL2MP_Player::UpdateFlashlight()
 			EyeVectors( &vecForward, &vecRight, &vecUp );
 
 
+#ifdef LUA_SDK
+		int nDistance = FLASHLIGHT_DISTANCE;
+
+		BEGIN_LUA_CALL_HOOK( "PlayerUpdateFlashlight" );
+			lua_pushhl2mpplayer( L, this );
+			lua_pushvector( L, position );
+			lua_pushvector( L, vecForward );
+			lua_pushvector( L, vecRight );
+			lua_pushvector( L, vecUp );
+			lua_pushinteger( L, nDistance );
+		END_LUA_CALL_HOOK( 6, 5 );
+
+		if ( lua_isuserdata( L, -5 ) && luaL_checkudata( L, -5, "Vector" ) )
+			VectorCopy( luaL_checkvector( L, -5 ), position );
+		if ( lua_isuserdata( L, -4 ) && luaL_checkudata( L, -4, "Vector" ) )
+			VectorCopy( luaL_checkvector( L, -4 ), vecForward );
+		if ( lua_isuserdata( L, -3 ) && luaL_checkudata( L, -3, "Vector" ) )
+			VectorCopy( luaL_checkvector( L, -3 ), vecRight );
+		if ( lua_isuserdata( L, -2 ) && luaL_checkudata( L, -2, "Vector" ) )
+			VectorCopy( luaL_checkvector( L, -2 ), vecUp );
+		if ( lua_isnumber( L, -1 ) )
+			nDistance = (int)lua_tointeger( L, -1 );
+
+		lua_pop( L, 5 );
+
+
+		// Update the light with the new position and direction.		
+		m_pHL2MPFlashLightEffect->UpdateLight( position, vecForward, vecRight, vecUp, nDistance );
+#else
 		// Update the light with the new position and direction.		
 		m_pHL2MPFlashLightEffect->UpdateLight( position, vecForward, vecRight, vecUp, FLASHLIGHT_DISTANCE );
+#endif
 	}
 	else if (m_pHL2MPFlashLightEffect)
 	{
